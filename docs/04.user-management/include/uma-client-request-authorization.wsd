@startuml "UMA Client Request Authorization"
autonumber
actor "Requesting Party" as RqP
participant Client
participant "Resource Server" as RS
box "Authorization Server"
participant "Authorization API" as AuthzAPI
participant "Protection API" as ProtAPI
end box

activate Client

Client -> AuthzAPI : Request Authz (AAT,Ticket,?claim_tokens)
activate AuthzAPI
AuthzAPI -> AuthzAPI : Check ticket
AuthzAPI -> AuthzAPI : Check policies vs request

opt Claims gathering
  AuthzAPI -> Client : Forbidden (need_info)

  alt Client Redirects Requesting Party to Authorization Server for Authentication
    Client -> RqP : <<redirect>> Reauthenticate
    activate RqP
    RqP -> AuthzAPI : Authenticate <<"step-up">>
    AuthzAPI -> RqP : <<redirect>> AuthN OK
    return AuthN OK
    Client -> AuthzAPI : Request Authz (AAT,Ticket,?claim_tokens)

  else Client Pushes Claim Tokens to Authorization Server
    Client -> AuthzAPI : Request Authz (AAT,Ticket,claim_tokens)

  else Client Redirects Requesting Party to Authorization Server for Claims-Gathering
    Client -> RqP : <<redirect>> Gather Claims
    activate RqP
    RqP -> AuthzAPI : Gather Claims
    note over AuthzAPI
      Authorization Server does what it needs to gather
      required claims. Eg. it may act as a relying
      party in a federated identity interaction
    end note
    AuthzAPI -> RqP : <<redirect>> "claims_submitted"
    note right
      Success case
      Indicates Client should
      re-submit to the RPT endpoint
    end note
    return "claims_submitted"
    Client -> AuthzAPI : Request Authz (AAT,Ticket,?claim_tokens)
  end

  AuthzAPI -> AuthzAPI : Check ticket
  AuthzAPI -> AuthzAPI : Check policies vs request
end

AuthzAPI -> Client : OK (RPT)
deactivate AuthzAPI
deactivate Client

note over RqP, ProtAPI
  Sequence can continue with flow 'UMA Access Resource'
end note

@enduml